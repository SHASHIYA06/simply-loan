import React, { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { useLocation, useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { CheckCircle, FileText, User, Banknote } from "lucide-react";

// Import Steps
import Step1_PersonalInfo from "../components/application/Step1_PersonalInfo";
import Step2_LoanDetails from "../components/application/Step2_LoanDetails";
import Step3_Documents from "../components/application/Step3_Documents";
import Step4_Success from "../components/application/Step4_Success";
import { Lead } from "@/entities/Lead";
import { Customer } from "@/entities/Customer";
import { Application } from "@/entities/Application";

const steps = [
  { icon: User, label: 'Personal Info', description: 'Tell us about yourself' },
  { icon: Banknote, label: 'Loan Details', description: 'Your financial requirements' },
  { icon: FileText, label: 'Documents', description: 'Upload required documents' },
];

export default function ApplicationForm() {
  const navigate = useNavigate();
  const location = useLocation();
  const [activeStep, setActiveStep] = useState(0);
  const [formData, setFormData] = useState({});
  const [lead, setLead] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    const params = new URLSearchParams(location.search);
    const leadId = params.get('lead');
    if (leadId) {
      Lead.get(leadId).then(leadData => {
        setLead(leadData);
        setFormData(prev => ({ 
          ...prev, 
          lead_id: leadData.id,
          personal: { name: leadData.name, email: leadData.email, phone: leadData.phone },
          loan: { loan_type: leadData.loan_interest }
        }));
      });
    }
  }, [location.search]);

  const handleNext = (data) => {
    setFormData(prev => ({ ...prev, ...data }));
    setActiveStep(prev => prev + 1);
  };

  const handleBack = () => {
    setActiveStep(prev => prev - 1);
  };

  const handleSubmit = async (data) => {
    setIsLoading(true);
    setFormData(prev => ({ ...prev, ...data }));
    const finalData = { ...formData, ...data };

    try {
      // 1. Create or find customer
      let customer = await Customer.filter({ phone: finalData.personal.phone }).then(res => res[0]);
      if (!customer) {
        customer = await Customer.create(finalData.personal);
      }

      // 2. Create Application
      const applicationData = {
        customer_id: customer.id,
        lead_id: finalData.lead_id,
        loan_type: finalData.loan.loan_type,
        amount: finalData.loan.amount,
        tenure_months: finalData.loan.tenure_months,
        income_monthly: finalData.loan.income_monthly,
        employment_type: finalData.loan.employment_type,
        documents: finalData.documents,
      };
      const newApplication = await Application.create(applicationData);
      
      // 3. Update Lead
      if (lead) {
        await Lead.update(lead.id, { applied: true, status: 'converted' });
      }

      setIsLoading(false);
      handleNext({application_id: newApplication.id});

    } catch(e) {
      console.error("Submission failed", e);
      alert("There was an error submitting your application.");
      setIsLoading(false);
    }
  };

  const renderStep = () => {
    switch (activeStep) {
      case 0:
        return <Step1_PersonalInfo onNext={handleNext} initialData={formData.personal} />;
      case 1:
        return <Step2_LoanDetails onNext={handleNext} onBack={handleBack} initialData={formData.loan} />;
      case 2:
        return <Step3_Documents onSubmit={handleSubmit} onBack={handleBack} isLoading={isLoading} />;
      case 3:
        return <Step4_Success application={formData} />;
      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 p-6">
      <div className="container mx-auto max-w-4xl">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-12"
        >
          <h1 className="text-4xl md:text-5xl font-bold text-slate-900 mb-4">
            Loan Application Form
          </h1>
          <p className="text-xl text-slate-600 max-w-2xl mx-auto">
            Just a few more steps to secure your financial future.
          </p>
        </motion.div>

        <div className="mb-12 px-4">
          <div className="flex items-start">
            {steps.map((step, index) => (
              <React.Fragment key={index}>
                <div className="flex flex-col items-center w-1/3">
                  <div
                    className={`w-12 h-12 rounded-full flex items-center justify-center border-2 transition-all duration-300 ${
                      activeStep > index
                        ? 'bg-blue-600 border-blue-600 text-white'
                        : activeStep === index
                        ? 'bg-blue-100 border-blue-600 text-blue-600 scale-110'
                        : 'bg-slate-100 border-slate-300 text-slate-500'
                    }`}
                  >
                    {activeStep > index ? <CheckCircle className="w-6 h-6" /> : <step.icon className="w-6 h-6" />}
                  </div>
                  <div className="mt-3 text-center">
                    <p
                      className={`font-semibold text-sm md:text-base transition-colors duration-300 ${
                        activeStep >= index ? 'text-slate-900' : 'text-slate-500'
                      }`}
                    >
                      {step.label}
                    </p>
                    <p className="text-xs text-slate-500 hidden md:block">{step.description}</p>
                  </div>
                </div>
                {index < steps.length - 1 && (
                  <div
                    className={`flex-1 h-1 mt-6 transition-all duration-300 ${
                      activeStep > index ? 'bg-blue-600' : 'bg-slate-200'
                    }`}
                  />
                )}
              </React.Fragment>
            ))}
          </div>
        </div>
        
        <AnimatePresence mode="wait">
          <motion.div
            key={activeStep}
            initial={{ x: 30, opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
            exit={{ x: -30, opacity: 0 }}
            transition={{ duration: 0.3 }}
          >
            {renderStep()}
          </motion.div>
        </AnimatePresence>
      </div>
    </div>
  );
}
